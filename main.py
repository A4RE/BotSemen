#!venv/bin/python

import logging

from aiogram import Bot, Dispatcher, executor
from aiogram import types
from aiogram.types import CallbackQuery, InputFile, message


from config import TOKEN
from keyboards.keyboard import mainMenu, btn2_menu, cafe, cinema, attractions, \
    concerts, choicejanre, choicejanre3, choicejanre2, theatre

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)


# –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É start
@dp.message_handler(commands=['start'])
async def cmd_answer(message: types.Message):
    await bot.send_message(message.from_user.id,
                           "–ü—Ä–∏–≤–µ—Ç {0.first_name},–º–µ–Ω—è –∑–æ–≤—É—Ç –ë–æ—Ç –°–µ–º–µ–Ω üêµ\n"
                           "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–∞, –≥–¥–µ –º–æ–∂–Ω–æ –∫–ª–∞—Å—Å–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è\n"
                           "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –¥–∞–ª—å—à–µ —Ä–∞—Å—Å–∫–∞–∂—É, —á—Ç–æ –¥–µ–ª–∞—Ç—å\n–î–ª—è –ø–æ–º–æ—â–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /help".format(message.from_user), reply_markup=mainMenu, parse_mode="MarkdownV2")
    p = open("bot.gif", "rb")
    await bot.send_animation(message.from_user.id, p)

# –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É help
@dp.message_handler(commands=['help'])
async def help(message: types.Message):
    await bot.send_message(message.from_user.id, "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–µ–±–µ:\n"
                                                 "/cafe\n/cinema\n/theatre\n/concert\n/attractions")
# cafe
@dp.message_handler(commands=['cafe'])
async def cafe1(message: types.Message):
    await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ —Ä–∞–π–æ–Ω –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–ø –º–µ—Å—Ç —Ä–∞–π–æ–Ω–∞:", reply_markup=cafe)

# cinema
@dp.message_handler(commands=['cinema'])
async def cinema1(message: types.Message):
    await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä:", reply_markup=cinema)


# theatre
@dp.message_handler(commands=['theatre'])
async def theatre1(message: types.Message):
    await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä:", reply_markup=theatre)


#attractions
@dp.message_handler(commands=['attractions'])
async def theatre1(message: types.Message):
    await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫–∏:", reply_markup=attractions)

# concert
@dp.message_handler(commands=['concert'])
async def concert1(message: types.Message):
    await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä:", reply_markup=concerts)

# –æ–±—ã—á–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
@dp.message_handler()
async def bot_message(message: types.Message):
    if message.text == "–ö–∞—Ñ–µ/–†–µ—Å—Ç–æ—Ä–∞–Ω":
        await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–µ—Ç–µ —Ä–∞–π–æ–Ω, –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–ø –º–µ—Å—Ç —Ä–∞–π–æ–Ω–∞:", reply_markup=cafe)
    elif message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await bot.send_message(message.from_user.id, " –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=mainMenu)
    elif message.text == "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç, –∞ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã üôÇ:", reply_markup=btn2_menu)
    elif message.text == "–ö–∏–Ω–æ üé¨":
        await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç, –∞ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã üôÇ:", reply_markup=cinema)
    elif message.text == "–ö–æ–Ω—Ü–µ—Ä—Ç üéº":
        await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç:", reply_markup=concerts)
    elif message.text == "–¢–µ–∞—Ç—Ä üé≠":
        await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–µ—Ç–µ –∂–∞–Ω—Ä:", reply_markup=theatre)
    elif message.text == "–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏":
        await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=attractions)

@dp.callback_query_handler(text_contains="this")
async def this_concert(call: CallbackQuery):
    await call.message.answer("–ü–µ—Ä–µ–¥ –í–∞–º–∏ –∂–∞–Ω—Ä—ã –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ.\n"
                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π.",
                              reply_markup=choicejanre2)

@dp.callback_query_handler(text_contains="next")
async def next_concert(call: CallbackQuery):
    await call.message.answer("–ü–µ—Ä–µ–¥ –í–∞–º–∏ –∂–∞–Ω—Ä—ã –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ.\n"
                                  "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π.",
                                  reply_markup=choicejanre3)

@dp.callback_query_handler(text_contains="without")
async def without_concert(call: CallbackQuery):
   await call.message.answer("–ü–µ—Ä–µ–¥ –í–∞–º–∏ –∂–∞–Ω—Ä—ã –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤.\n"
                                      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π.",
                                      reply_markup=choicejanre)

@dp.callback_query_handler(text_contains="cancel")
async def cancel_concert(call: CallbackQuery):
    await call.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –æ–±—â–µ–µ –º–µ–Ω—é", show_alert=True)
    await call.message.answer("–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n"
                              "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é",
                              reply_markup=mainMenu)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
